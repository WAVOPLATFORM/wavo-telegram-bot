
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ChatMemberUpdated
from aiogram.utils import executor
from aiogram.dispatcher.filters import ChatMemberUpdatedFilter
import os

API_TOKEN = os.getenv("BOT_TOKEN")
INVITE_LINK = os.getenv("INVITE_LINK", "https://t.me/WAVO_Initiatives_Test")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.chat_member_handler(ChatMemberUpdatedFilter(member_status_changed=True))
async def welcome_new(chat_member: ChatMemberUpdated):
    if chat_member.new_chat_member.user.is_bot:
        return
    user = chat_member.new_chat_member.user
    await bot.send_message(
        chat_member.chat.id,
        f"üß¨ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WAVO.\n\n"
        "WAVO ‚Äî —ç—Ç–æ –∂–∏–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º. –ú—ã –∑–¥–µ—Å—å –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∞—Ç–∏–º—Å—è. –ú—ã —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ–º.\n\n"
        "**–ö—Ç–æ —Ç—ã?** –ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É:\n"
        "1 ‚Äî –§–∏–ª–æ—Å–æ—Ñ\n"
        "2 ‚Äî –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n"
        "3 ‚Äî –°—Ç—Ä–æ–∏—Ç–µ–ª—å –∫—É–ª—å—Ç—É—Ä—ã\n"
        "4 ‚Äî –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å"
    )

@dp.message_handler(lambda message: message.text in ['1', '2', '3', '4'])
async def handle_role(message: Message):
    roles = {
        '1': "üß† –§–∏–ª–æ—Å–æ—Ñ. –¢—ã ‚Äî –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –º—ã—à–ª–µ–Ω–∏—è WAVO.",
        '2': "üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –¢—ã ‚Äî —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–µ WAVO.",
        '3': "üé® –°—Ç—Ä–æ–∏—Ç–µ–ª—å –∫—É–ª—å—Ç—É—Ä—ã. –¢—ã ‚Äî –¥—ã—Ö–∞–Ω–∏–µ WAVO.",
        '4': "üëÅ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å. –¢—ã ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ —Å–≤–æ–±–æ–¥–∞ WAVO."
    }
    await message.reply(f"{roles[message.text]}\n\nüëâ –ò—Å–ø—ã—Ç–∞–π WAVO –≤ –¥–µ–π—Å—Ç–≤–∏–∏: {INVITE_LINK}")

@dp.message_handler(commands=['start'])
async def start(message: Message):
    await message.reply("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–ø–∏—à–∏ 1-4 –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
